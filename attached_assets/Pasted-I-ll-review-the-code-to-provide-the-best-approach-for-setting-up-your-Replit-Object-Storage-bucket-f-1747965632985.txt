I'll review the code to provide the best approach for setting up your Replit Object Storage bucket for public read access. After examining your codebase, I can see you're already using Object Storage for image handling.

The Replit Object Storage system doesn't have a direct "public access" setting like some other cloud storage providers. Instead, when you upload files, they're given public URLs by default. This is handled by the uploadImage function in your objectStorage.ts file.

Looking at your implementation in server/objectStorage.ts, I can see that you're already generating public URLs for your uploaded images:

// Get the public URL for the uploaded image
const url = `https://storage.replit.com/${client.bucket}/${key}`;
However, to improve this system and ensure all objects are consistently accessible with proper headers, I recommend implementing a helper function that manages URL generation and ensures public readability:

server/objectStorage.ts
Add function to get public URL for objects, Update uploadImage to use getPublicUrl function
I'll review the code to provide the best approach for setting up your Replit Object Storage bucket for public read access. After examining your codebase, I can see you're already using Object Storage for image handling.

The Replit Object Storage system doesn't have a direct "public access" setting like some other cloud storage providers. Instead, when you upload files, they're given public URLs by default. This is handled by the uploadImage function in your objectStorage.ts file.

Looking at your implementation in server/objectStorage.ts, I can see that you're already generating public URLs for your uploaded images:

// Get the public URL for the uploaded image
const url = `https://storage.replit.com/${client.bucket}/${key}`;
However, to improve this system and ensure all objects are consistently accessible with proper headers, I recommend implementing a helper function that manages URL generation and ensures public readability:

These changes standardize how you generate public URLs for your objects. The getPublicUrl function ensures consistent URL formatting and proper URL encoding of object keys.

For your reference, here's how to use this function when you need to generate a public URL for any object in your storage:

import { getPublicUrl } from './objectStorage';
// Later in your code
const publicUrl = getPublicUrl('photos/123/my-image.jpg');
All objects uploaded to Replit Object Storage are public by default when accessed through the storage.replit.com domain with the bucket ID and key path. The function we added ensures you have a consistent way to generate these public URLs throughout your application.